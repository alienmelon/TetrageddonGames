package  {	import flash.display.*;	import flash.events.*;	import flash.utils.*;	import flash.ui.*;	import tetrigeddon.TileGrid;	import tetrigeddon.EnemyManager;	import tetrigeddon.Enemy;	import tetrigeddon.display.Debris;	import tetrigeddon.Score;	/*		This is the first ported actionscript 3.0 version of the original 2.0 game engine.		Things to still do include changing all setIntervals to Timers.		Better removing, and managing of added children.		And game center functionality.		A better leveling system.		Tile preview (of next tile).		I will be updating these classes with fixes as I go.				AS3 version by Nathalie Lawhead		AS2 (Original) by Daniel and Larry Lawhead	*/	/**	* Manipulates the entire game world.	*/	public class Game	{		/**		* Grid of TileBlocks represented as numbers.		*/		public static var tileGrid:TileGrid		/**		* Current level the game is in.		*/		private static var level:Number;		/**		* Manages Enemy instances.		*/		public static var enemies:EnemyManager;				/**		 * Player's score.		 */		public static var playerScore:Score;				/**		 * ID generated by setInterval for moving the current figure down.		 */		private static var progressGameIntr:uint; //was private, was Number				/**		 * ID generated by setInterval for shaking a MovieClip.		 */		private static var shakeIntr:Number;				/**		 * Contains city assets to destroy when blocks shake the screen.		 */		private static var cityArray:Array;				/*		 * Records when the next level occures.		 */		private static var nextLvl:Number;				/*		 * The main timeline		 */		private var __mainTimeline:MovieClip;		/**		* Manages the entire game.		*/		//public static function init()		public static function init(_mainTimeline:MovieClip)		{			//_root = _mainTimeline			//stage = _stage						//trace("init called.");						__mainTimeline = _mainTimeline;						var _stage:Object = _mainTimeline.parent;						_mainTimeline.stop();						// Define global variables.			_mainTimeline.stopGame = false;						_mainTimeline.score = 0;			_mainTimeline.NUM_BLOCKS_X = 25;//23			_mainTimeline.GRID_START_X = 9;//9			_mainTimeline.GRID_END_X = 18;//17//UPDATED TO 18			_mainTimeline.NUM_BLOCKS_Y = 16;//16			_mainTimeline.NUM_BLOCK_GRAPHICS = 36;//34			//			_mainTimeline.BLOCK_SIZE = 35;			_mainTimeline.BLOCK_SPACING = 1;			//			_mainTimeline.SCREEN_WIDTH = 960;			_mainTimeline.SCREEN_HEIGHT = 640;				Game.tileGrid = new TileGrid(_mainTimeline);						Game.playerScore = new Score();						_mainTimeline.mainAudioLoopStarted = false;			_mainTimeline.spaceUp = true;									_stage.addEventListener(KeyboardEvent.KEY_UP, _mainTimeline_onKeyUp);			_stage.addEventListener(KeyboardEvent.KEY_DOWN, _mainTimeline_onKeyDown);/**/			_stage.addEventListener(Event.ENTER_FRAME, _mainTimeline_clearList);			//_stage.focus = _stage;			///*			_mainTimeline.btn_control_down.addEventListener(MouseEvent.MOUSE_DOWN, _mainTimeline_btnDOWN);			_mainTimeline.btn_control_left.addEventListener(MouseEvent.MOUSE_DOWN, _mainTimeline_btnLEFT);			_mainTimeline.btn_control_right.addEventListener(MouseEvent.MOUSE_DOWN, _mainTimeline_btnRIGHT);			_mainTimeline.btn_control_smash.addEventListener(MouseEvent.MOUSE_DOWN, _mainTimeline_btnSMASH);			_mainTimeline.btn_control_rotate.addEventListener(MouseEvent.MOUSE_DOWN, _mainTimeline_btnROTATE);			_stage.addEventListener(MouseEvent.MOUSE_UP, _mainTimeline_FINGER_UP);*/			/*			_mainTimeline.btn_control_smash.addEventListener(MouseEvent.MOUSE_DOWN, _mainTimeline_btnSMASH);			_mainTimeline.btn_control_rotate.addEventListener(MouseEvent.MOUSE_DOWN, _mainTimeline_btnROTATE);			_mainTimeline.btn_control_left.addEventListener(MouseEvent.MOUSE_DOWN, _mainTimeline_btnLEFT);			_mainTimeline.btn_control_right			stage.addEventListener(MouseEvent.MOUSE_UP, _mainTimeline_FINGER_UP);			*/						function _mainTimeline_clearList(event:Event){				if(_mainTimeline.stopGame){/**/				_stage.removeEventListener(KeyboardEvent.KEY_UP, _mainTimeline_onKeyUp);					_stage.removeEventListener(KeyboardEvent.KEY_DOWN, _mainTimeline_onKeyDown);					_stage.removeEventListener(Event.ENTER_FRAME, _mainTimeline_clearList);					///*					_mainTimeline.btn_control_down.removeEventListener(MouseEvent.MOUSE_DOWN, _mainTimeline_btnDOWN);					_mainTimeline.btn_control_left.removeEventListener(MouseEvent.MOUSE_DOWN, _mainTimeline_btnLEFT);					_mainTimeline.btn_control_right.removeEventListener(MouseEvent.MOUSE_DOWN, _mainTimeline_btnRIGHT);					_mainTimeline.btn_control_smash.removeEventListener(MouseEvent.MOUSE_DOWN, _mainTimeline_btnSMASH);					_mainTimeline.btn_control_rotate.removeEventListener(MouseEvent.MOUSE_DOWN, _mainTimeline_btnROTATE);					_stage.removeEventListener(MouseEvent.MOUSE_UP, _mainTimeline_FINGER_UP);*/				}			};						function _mainTimeline_onKeyUp(event:KeyboardEvent)			{				var key:uint = event.keyCode;				switch (key)				{					case Keyboard.SPACE : 						_mainTimeline.spaceUp = true;						//trace(_mainTimeline.spaceUp);						break;				}			}			function _mainTimeline_onKeyDown(event:KeyboardEvent)			{				var key:uint = event.keyCode;				switch (key)				{					case Keyboard.LEFT : 						if (Game.tileGrid.move("left", true))						{							Game.tileGrid.move("left", false);						}						break;					case Keyboard.RIGHT :						if (Game.tileGrid.move("right", true))						{							Game.tileGrid.move("right", false);						}						break;					case Keyboard.UP : 						if (Game.tileGrid.rotate(true))						{							Game.tileGrid.rotate(false);						}						break;					case Keyboard.DOWN :						if (Game.tileGrid.move("down", true))						{							Game.tileGrid.move("down", false);						}						break;										case Keyboard.SPACE :						if (_mainTimeline.spaceUp)						{							Game.tileGrid.drop();							_mainTimeline.spaceUp = false;							//trace(_mainTimeline.spaceUp);							break;						}				}			};			/*			function _mainTimeline_btnDOWN(event:MouseEvent){				if (Game.tileGrid.move("down", true))				{					Game.tileGrid.move("down", false);				}			}			function _mainTimeline_btnLEFT(event:MouseEvent){				if (Game.tileGrid.move("left", true))				{					Game.tileGrid.move("left", false);				}			}			function _mainTimeline_btnRIGHT(event:MouseEvent){				if (Game.tileGrid.move("right", true))				{					Game.tileGrid.move("right", false);				}			}			function _mainTimeline_btnSMASH(event:MouseEvent){				if (_mainTimeline.spaceUp)				{					Game.tileGrid.drop();					_mainTimeline.spaceUp = false;					//trace(_mainTimeline.spaceUp);				}			}			function _mainTimeline_btnROTATE(event:MouseEvent){				if (Game.tileGrid.rotate(true))				{					Game.tileGrid.rotate(false);				}			}			function _mainTimeline_FINGER_UP(event:MouseEvent){				_mainTimeline.spaceUp = true;			}*/			//Key.addListener(_root);				Game.shakeIntr = -1;						Game.cityArray = new Array(_mainTimeline.mc_roof1, _mainTimeline.mc_window1, _mainTimeline.mc_window1_, _mainTimeline.mc_window1__, _mainTimeline.mc_roof2, _mainTimeline.mc_roof2_, _mainTimeline.mc_roof2__, _mainTimeline.mc_building1, _mainTimeline.mc_window2.mc_1, _mainTimeline.mc_window2.mc_2, _mainTimeline.mc_window2_2.mc_1, _mainTimeline.mc_window2_2.mc_2, _mainTimeline.mc_door1, _mainTimeline.mc_roof3, _mainTimeline.mc_roof3_, _mainTimeline.mc_window3, _mainTimeline.mc_window4.mc_1, _mainTimeline.mc_window4.mc_2, _mainTimeline.mc_window6.mc_1, _mainTimeline.mc_window6.mc_2, _mainTimeline.mc_door2, _mainTimeline.mc_building2, _mainTimeline.mc_building3, _mainTimeline.mc_roof4, _mainTimeline.mc_building6, _mainTimeline.mc_window5, _mainTimeline.mc_window7.mc_1, _mainTimeline.mc_window7.mc_2, _mainTimeline.mc_window8.mc_1, _mainTimeline.mc_window8.mc_2, _mainTimeline.mc_window9.mc_1, _mainTimeline.mc_window9.mc_2, _mainTimeline.mc_stairs, _mainTimeline.mc_building5, _mainTimeline.mc_building6, _mainTimeline.mc_building7, _mainTimeline.mc_window10, _mainTimeline.mc_window11, _mainTimeline.mc_window12, _mainTimeline.mc_window13, _mainTimeline.mc_window14, _mainTimeline.mc_window15, _mainTimeline.mc_window16, _mainTimeline.mc_window17, _mainTimeline.mc_window18, _mainTimeline.mc_window19, _mainTimeline.mc_window20, _mainTimeline.mc_window21, _mainTimeline.mc_tree1.mc_1, _mainTimeline.mc_tree1.mc_2, _mainTimeline.mc_tree1.mc_3, _mainTimeline.mc_tree2.mc_1, _mainTimeline.mc_tree2.mc_2, _mainTimeline.mc_tree2.mc_3, _mainTimeline.mc_tree3.mc_1, _mainTimeline.mc_tree3.mc_2, _mainTimeline.mc_tree3.mc_3, _mainTimeline.mc_tree4.mc_1, _mainTimeline.mc_tree4.mc_2, _mainTimeline.mc_tree4.mc_3, _mainTimeline.mc_tree5.mc_1, _mainTimeline.mc_tree5.mc_2, _mainTimeline.mc_tree5.mc_3, _mainTimeline.mc_sidewalk, _mainTimeline.mc_cityscape, _mainTimeline.mc_cityscape2, _mainTimeline.mc_mountain, _mainTimeline.mc_sky, _mainTimeline.mc_clouds, _mainTimeline.mc_chaos, _mainTimeline.mc_chaos2);						tileGrid.create(_mainTimeline);			tileGrid.createNewFigure();			Game.nextLvl = 0;			_mainTimeline.mc_cityscape.ox = _mainTimeline.mc_cityscape.x;			_mainTimeline.mc_cityscape.oy = _mainTimeline.mc_cityscape.y;			_mainTimeline.mc_cityscape2.ox = _mainTimeline.mc_cityscape2.x;			_mainTimeline.mc_cityscape2.oy = _mainTimeline.mc_cityscape2.y;			// Start the game!!			Game.start(_mainTimeline);		}				public static function start(_mainTimeline:MovieClip)		{			Game.level = 1;			Game.enemies = new EnemyManager(_mainTimeline);			Game.tileGrid.downSpeed = 700;			//changed all calls of:			//Game.progressGameIntr = setInterval(tileGrid, "progressGame", Game.tileGrid.downSpeed);			//to this a non Object setInterval call because of not a function error.			Game.progressGameIntr = setInterval(tileGrid.progressGame, Game.tileGrid.downSpeed);			__mainTimeline.ARR_INTERVALS.push(Game.progressGameIntr);			Game.enemies.max = 10;			function _mainTimeline_onEnterFrame(event:Event)			{				//if game is stopped, removed				if(_mainTimeline.stopGame){					_mainTimeline.removeEventListener(Event.ENTER_FRAME, _mainTimeline_onEnterFrame);				}				//if game is not stopped then carry on				if(!_mainTimeline.stopGame){					_mainTimeline.score_txt.text = _mainTimeline.scoreShadow_txt.text = Game.playerScore.getScore();					Game.loop();				}			}			_mainTimeline.addEventListener(Event.ENTER_FRAME, _mainTimeline_onEnterFrame);//			_root.onEnterFrame = function ()//			{//				_root.score_txt.text = _root.scoreShadow_txt.text = Game.playerScore.getScore();//				Game.loop();//			}		}				//clear progress game interval from outside of Game		public static function clearGameIntervals(){			trace("Game.clearProgressGame() called");			clearInterval(Game.progressGameIntr);			//			for(var ipg:Number = 0; ipg<__mainTimeline.ARR_INTERVALS.length; ++ipg){				clearInterval(__mainTimeline.ARR_INTERVALS[ipg]);			}		}				/*		kill current game - remove all		*/		public static function stop()		{			//trace("<<Game::stop>> Called.");			__mainTimeline.stopGame = true;			//			Game.clearGameIntervals();			//clearInterval(Game.progressGameIntr);			//hack: clear all intervals			//EDIT: NEED A BETTER SYSTEM IN PLACE THAT IS NOT SETINTERVAL			for(var j:Number = 0; j<100; ++j){				clearInterval(j);			}			//			Game.tileGrid.destroy();			Game.enemies.clear();			//			__mainTimeline.mainAudioLoopStarted = false;			//			for (var i:String in __mainTimeline) {				if (i.indexOf("debris_") > -1 || i.indexOf("bird_") > -1 || i.indexOf("citizen_") > -1) {				}			}			//			//			Game.enemies = null;			Game.tileGrid = null;			//REMOVING CHILDREN:			//remove all of them (contents of array)			//removing enemies is a quick fix into this			//ideally i want to get rid of the array and just loop through contents of the main timeline			//if one is a  match to an enemy then remove it... for now:			for (var ei:Number = 0; ei<__mainTimeline.ARR_ENEMIES.length; ei++){				try{					__mainTimeline.removeChild(__mainTimeline.ARR_ENEMIES[ei]);				}catch(e:Error){					//null - already removed				}			}			__mainTimeline.ARR_ENEMIES = []; //clear out			//gibs/debries			for (var di:Number = 0; di<__mainTimeline.ARR_DISPLAY.length; ++di){				try{					__mainTimeline.removeChild(__mainTimeline.ARR_DISPLAY[di]);				}catch(e:Error){					//null - already removed				}			}			__mainTimeline.ARR_DISPLAY = []; //clear out/*			for (var di:Number=0; di<__mainTimeline.numChildren; di++)			{				var clips:Object = __mainTimeline.getChildAt(di);				trace(clips);				try{					if (clips.toString() == '[object gibs]')					{						__mainTimeline.removeChild(clips);					}				}catch(e:Error){					//trace("Error removing [object gibs]");				}				try{					if (clips.toString() == "[object onomatopoeia]"){						__mainTimeline.removeChild(clips);					}				}catch(e:Error){					//trace("Error removing [object onomatopoeia]");				}				try{					if (clips.toString() == "[object rubble]"){						__mainTimeline.removeChild(clips);					}				}catch(e:Error){					//trace("Error removing [object rubble]");				}			}*///			delete Game.enemies;//			delete Game.tileGrid;			//delete _root.onEnterFrame;			//delete _root.onKeyDown;		}				/**		* Iterates through the game loop once.		*/		private static function loop()		{			/*trace("Game.loop called");*/			Game.nextLvl = Game.playerScore.getScore() - (Game.level * 3500);			if (Game.nextLvl > 0)			{				Game.level += 1;				// Destroy background				//Game.shake(_mainTimeline.shake);				/*Game.shake(__mainTimeline, 10);*/				destroyScenery();			}			Game.enemies.addEnemy(Game.randomNumber(1, 2));			Game.enemies.update();		}				/**		* Shakes screen. DEPRECATED!		*/		public static function shakeScreen()		{			//trace("shakeScreen - DEPRECATED! called. Remove it.");		}				public static function randomNumber(min:Number, max:Number)		{			return Math.floor(Math.random() * (max - min + 1)) + min;		}				public static function resetSpeed()		{			clearInterval(Game.progressGameIntr);			Game.tileGrid.downSpeed = Game.randomNumber(100, 500);			//Game.progressGameIntr = setInterval(tileGrid, "progressGame", Game.tileGrid.downSpeed);			Game.progressGameIntr = setInterval(tileGrid.progressGame, Game.tileGrid.downSpeed);			__mainTimeline.ARR_INTERVALS.push(Game.progressGameIntr);		}				/**		 * Shakes a movieclip.		 */		public static function shake(mc:MovieClip, multiplier:Number=1) {			//if (Game.shakeIntr != -1) return;			//if (multiplier == undefined) multiplier = 1;			if(mc.origValX == undefined){				mc.origValX = mc.x;				mc.origValY = mc.y;			}			// Original values of MovieClip.			var origVals:Array = [mc.origValX, mc.origValY];			// Keeps track of how many times shakemc was called.			var counter:Number = 0;			var shakemc:Function = function ()			{				mc.x = origVals[0];				mc.y = origVals[1];				// Check if shaking should stop!				if (++counter >= 5)				{					//					clearInterval(Game.shakeIntr);					Game.shakeIntr = -1;					return;				}								mc.x += Game.randomNumber(-6 * multiplier, 6 * multiplier);				mc.y += Game.randomNumber(-6 * multiplier, 6 * multiplier);			}			// Begin shaking only if mc is not already shaking.			clearInterval(Game.shakeIntr);			Game.shakeIntr = setInterval(shakemc, 10);			////			for (var i:Number = 0; i != _root.cityArray.length; i++)//			{//				_root.cityArray[i].gotoAndStop(_root.cityArray[i]._currentframe + 1);//			}		}		private static function destroyScenery() {			//trace("Game.destroyScenery() called");			for (var i:Number = 0; i < Game.cityArray.length; i++) {				try{					Game.cityArray[i].gotoAndStop(cityArray[i].currentFrame+1);				}catch(e:Error){					//trace("Game.destroyScenery returned null.");				}			}			//shake			Game.shake(__mainTimeline);			Game.shake(__mainTimeline.mc_cityscape, 2);			Game.shake(__mainTimeline.mc_cityscape2, 4);		}	}}