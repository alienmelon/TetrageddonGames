package tetrigeddon {	/**	* Represents a grid figure.	*/		import tetrigeddon.TileBlock;	import tetrigeddon.display.ComicBubble;	import flash.display.*;	import flash.events.*;	import flash.utils.*;	public class TileFigure	{		public var blocks:Array;		public var block_tiles:Number;//the amount of tiles allowed		//stage		public var _mainTimeline:MovieClip;		public var _stage:Object;		public var has_comic:Boolean;		//private bellow this point		private var _curShape:String;		public function TileFigure(__mainTimeline:MovieClip)		{			this._curShape;// = "";			this._mainTimeline = __mainTimeline;			this._stage = __mainTimeline.parent;		}				// Creates shape. Values "l", "o", "s", or "z" can be passed in.		public function create(shape:String)		{			//trace("TileFigure.create(shape) called");						this.block_tiles = 5; //4;//						this.blocks = new Array(block_tiles);//4						var halfWidth:Number = Math.ceil(_mainTimeline.NUM_BLOCKS_X / 2);// /2  			for (var i:Number = 0; i < block_tiles; i++)			{				this.blocks[i] = new TileBlock(_mainTimeline);			}						//shape = "t";//this is for testing each tile						this._curShape = shape;						switch (shape.toLowerCase())			{				case "i":					this.blocks[0].x = halfWidth;					this.blocks[0].y = -3;					this.blocks[1].x = halfWidth;					this.blocks[1].y = -4;					this.blocks[2].x = halfWidth;					this.blocks[2].y = -2;					this.blocks[3].x = halfWidth;					this.blocks[3].y = -1;					this.blocks[4].x = halfWidth;					this.blocks[4].y = -1;					break;				case "o":					this.blocks[0].x = halfWidth - 1;					this.blocks[0].y = -2;					this.blocks[1].x = halfWidth;					this.blocks[1].y = -2;					this.blocks[2].x = halfWidth - 1;					this.blocks[2].y = -1;					this.blocks[3].x = halfWidth;					this.blocks[3].y = -1;					this.blocks[4].x = halfWidth;					this.blocks[4].y = -1;					break;				case "s":					this.blocks[0].x = halfWidth;					this.blocks[0].y = 0;					this.blocks[1].x = halfWidth;					this.blocks[1].y = -1;					this.blocks[2].x = halfWidth - 1;					this.blocks[2].y = 0;					this.blocks[3].x = halfWidth + 1;					this.blocks[3].y = -1;					this.blocks[4].x = halfWidth + 1;					this.blocks[4].y = -1;					break;				case "z":					this.blocks[0].x = halfWidth;					this.blocks[0].y = 0;					this.blocks[1].x = halfWidth;					this.blocks[1].y = -1;					this.blocks[2].x = halfWidth + 1;					this.blocks[2].y = 0;					this.blocks[3].x = halfWidth - 1;					this.blocks[3].y = -1;					this.blocks[4].x = halfWidth - 1;					this.blocks[4].y = -1;					break;				case "l":					this.blocks[0].x = halfWidth;					this.blocks[0].y = -2;					this.blocks[1].x = halfWidth;					this.blocks[1].y = -1;					this.blocks[2].x = halfWidth;// + 1;					this.blocks[2].y = -3;					this.blocks[3].x = halfWidth + 1;					this.blocks[3].y = -1;					this.blocks[4].x = halfWidth + 1;					this.blocks[4].y = -1;					break;				case "j":					this.blocks[0].x = halfWidth;					this.blocks[0].y = -2;					this.blocks[1].x = halfWidth;					this.blocks[1].y = -1;					this.blocks[2].x = halfWidth;// + 1;					this.blocks[2].y = -3;					this.blocks[3].x = halfWidth - 1;					this.blocks[3].y = -1;					this.blocks[4].x = halfWidth - 1;					this.blocks[4].y = -1;					break;				case "t":					this.blocks[0].x = halfWidth;					this.blocks[0].y = -1;					this.blocks[1].x = halfWidth;					this.blocks[1].y = -2;					this.blocks[2].x = halfWidth + 1;					this.blocks[2].y = -1;					this.blocks[3].x = halfWidth - 1;					this.blocks[3].y = -1;					this.blocks[4].x = halfWidth - 1;					this.blocks[4].y = -1;					break;				case "wtf":				//if (_root.onomatopoeia_supriseMC == undefined) {					//check through mainTimeline and see if "onomatopoeia_suprise" has been added					//if so then set to true so it doesn't get added again					for(var j:Number=0;j<_mainTimeline.numChildren;j++){						if(_mainTimeline.getChildAt(j) is onomatopoeia_suprise){							//trace("Yes. Here it is.");							has_comic = true;						}					}					if (!has_comic){						var randX:Number = Math.ceil(Math.random()*960);						var randY:Number = Math.ceil(Math.random()*640);						//var bub:ComicBubble = new ComicBubble(_stage.stageWidth / 2, _stage.stageHeight / 2, "onomatopoeia_suprise", this._mainTimeline);						var bub:ComicBubble = new ComicBubble(randX, randY, "onomatopoeia_suprise", this._mainTimeline);						//block4						//block5						//suprise2						//suprise3						var id:String = "block" + Game.randomNumber(4, 5);						var id2:String = "suprise" + Game.randomNumber(2, 3);						//						if (Game.randomNumber(0, 1) == 1) {							var snd_1:Class = getDefinitionByName(id) as Class;							var s1 = new snd_1();							s1.play();						} else {							var snd_2:Class = getDefinitionByName(id2) as Class;							var s2 = new snd_2();							s2.play();						}					}					//Set wtf to Pentomino variations from array:					var shapes = new Array("i","f1","f2","j","l","p1","p2","s1","s2","t","u","v","x","y1","y2","z1","z2"); //REMOVED: "w",							var ran:Number = Math.floor(Math.random() * (Game.randomNumber(shapes.length - 1, shapes.length)));					var randomShape = shapes[ran];					//check and set:						if(randomShape == "i"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -2;							this.blocks[1].x = halfWidth;							this.blocks[1].y = -3;							this.blocks[2].x = halfWidth;							this.blocks[2].y = -4;							this.blocks[3].x = halfWidth;							this.blocks[3].y = -1;							this.blocks[4].x = halfWidth;							this.blocks[4].y = 0;						}						if(randomShape == "z2"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -3;							this.blocks[1].x = halfWidth - 1;							this.blocks[1].y = -2;							this.blocks[2].x = halfWidth;							this.blocks[2].y = -2;							this.blocks[3].x = halfWidth;							this.blocks[3].y = -4;							this.blocks[4].x = halfWidth + 1;							this.blocks[4].y = -4;						}						if(randomShape == "z1"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -3;							this.blocks[1].x = halfWidth + 1;							this.blocks[1].y = -2;							this.blocks[2].x = halfWidth;							this.blocks[2].y = -2;							this.blocks[3].x = halfWidth;							this.blocks[3].y = -4;							this.blocks[4].x = halfWidth - 1;							this.blocks[4].y = -4;						}						if(randomShape == "y2"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -3;							this.blocks[1].x = halfWidth;							this.blocks[1].y = -4;							this.blocks[2].x = halfWidth + 1;							this.blocks[2].y = -3;							this.blocks[3].x = halfWidth;							this.blocks[3].y = -2;							this.blocks[4].x = halfWidth;							this.blocks[4].y = -1;						}						if(randomShape == "y1"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -3;							this.blocks[1].x = halfWidth;							this.blocks[1].y = -4;							this.blocks[2].x = halfWidth - 1;							this.blocks[2].y = -3;							this.blocks[3].x = halfWidth;							this.blocks[3].y = -2;							this.blocks[4].x = halfWidth;							this.blocks[4].y = -1;						}						if(randomShape == "v"){							this.blocks[0].x = halfWidth - 1;							this.blocks[0].y = -2;							this.blocks[1].x = halfWidth + 1;							this.blocks[1].y = -2;							this.blocks[2].x = halfWidth;							this.blocks[2].y = -2;							this.blocks[3].x = halfWidth - 1;							this.blocks[3].y = -3;							this.blocks[4].x = halfWidth - 1;							this.blocks[4].y = -4;						}						if(randomShape == "x"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -3;							this.blocks[1].x = halfWidth;							this.blocks[1].y = -2;							this.blocks[2].x = halfWidth + 1;							this.blocks[2].y = -3;							this.blocks[3].x = halfWidth - 1;							this.blocks[3].y = -3;							this.blocks[4].x = halfWidth;							this.blocks[4].y = -4;						}						if(randomShape == "w"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -3;							this.blocks[1].x = halfWidth + 1;							this.blocks[1].y = -2;							this.blocks[2].x = halfWidth;							this.blocks[2].y = -2;							this.blocks[3].x = halfWidth - 1;							this.blocks[3].y = -3;							this.blocks[4].x = halfWidth - 1;							this.blocks[4].y = -4;							}						if(randomShape == "u"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -1;							this.blocks[1].x = halfWidth - 1;							this.blocks[1].y = -1;							this.blocks[2].x = halfWidth + 1;							this.blocks[2].y = -1;							this.blocks[3].x = halfWidth - 1;							this.blocks[3].y = -2;							this.blocks[4].x = halfWidth + 1;							this.blocks[4].y = -2;							}						if(randomShape == "s2"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -2;							this.blocks[1].x = halfWidth;							this.blocks[1].y = -3;							this.blocks[2].x = halfWidth;							this.blocks[2].y = -4;							this.blocks[3].x = halfWidth + 1;							this.blocks[3].y = -2;							this.blocks[4].x = halfWidth + 1;							this.blocks[4].y = -1;							}						if(randomShape == "s1"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -2;							this.blocks[1].x = halfWidth;							this.blocks[1].y = -3;							this.blocks[2].x = halfWidth;							this.blocks[2].y = -4;							this.blocks[3].x = halfWidth - 1;							this.blocks[3].y = -2;							this.blocks[4].x = halfWidth - 1;							this.blocks[4].y = -1;							}						if(randomShape == "p2"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -2;							this.blocks[1].x = halfWidth + 1;							this.blocks[1].y = -3;							this.blocks[2].x = halfWidth + 1;							this.blocks[2].y = -2;							this.blocks[3].x = halfWidth;							this.blocks[3].y = -3;							this.blocks[4].x = halfWidth;							this.blocks[4].y = -1;							}						if(randomShape == "p1"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -2;							this.blocks[1].x = halfWidth - 1;							this.blocks[1].y = -3;							this.blocks[2].x = halfWidth - 1;							this.blocks[2].y = -2;							this.blocks[3].x = halfWidth;							this.blocks[3].y = -3;							this.blocks[4].x = halfWidth;							this.blocks[4].y = -1;							}						if(randomShape == "f1"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -2;							this.blocks[1].x = halfWidth + 1;							this.blocks[1].y = -3;							this.blocks[2].x = halfWidth - 1;							this.blocks[2].y = -2;							this.blocks[3].x = halfWidth;							this.blocks[3].y = -3;							this.blocks[4].x = halfWidth;							this.blocks[4].y = -1;							}						if(randomShape == "f2"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -2;							this.blocks[1].x = halfWidth - 1;							this.blocks[1].y = -3;							this.blocks[2].x = halfWidth + 1;							this.blocks[2].y = -2;							this.blocks[3].x = halfWidth;							this.blocks[3].y = -3;							this.blocks[4].x = halfWidth;							this.blocks[4].y = -1;							}						if(randomShape == "w"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -2;							this.blocks[1].x = halfWidth;							this.blocks[1].y = -4;							this.blocks[2].x = halfWidth - 1;							this.blocks[2].y = -3;							this.blocks[3].x = halfWidth - 1;							this.blocks[3].y = -1;							this.blocks[4].x = halfWidth;							this.blocks[4].y = 0;							}						if(randomShape == "l"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -2;							this.blocks[1].x = halfWidth;							this.blocks[1].y = -3;							this.blocks[2].x = halfWidth;							this.blocks[2].y = -4;							this.blocks[3].x = halfWidth;							this.blocks[3].y = -1;							this.blocks[4].x = halfWidth - 1;							this.blocks[4].y = -1;							}						if(randomShape == "j"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -2;							this.blocks[1].x = halfWidth;							this.blocks[1].y = -3;							this.blocks[2].x = halfWidth;							this.blocks[2].y = -4;							this.blocks[3].x = halfWidth;							this.blocks[3].y = -1;							this.blocks[4].x = halfWidth + 1;							this.blocks[4].y = -1;							}						if(randomShape == "t"){							this.blocks[0].x = halfWidth;							this.blocks[0].y = -2;							this.blocks[1].x = halfWidth + 1;							this.blocks[1].y = -3;							this.blocks[2].x = halfWidth - 1;							this.blocks[2].y = -3;							this.blocks[3].x = halfWidth;							this.blocks[3].y = -3;							this.blocks[4].x = halfWidth;							this.blocks[4].y = -1;							}					break;			}		}				// Destroy all TileBlock instances in this.blocks and destroy this.		public function destroy()		{			//trace("TileFigure.destroy() called");			for (var i:Number = 0; i < this.blocks.length; i++)			{				delete this.blocks[i];			}		}				// Rotates block in direction dir. If doTest is true, only hit detection takes place.		public function rotate(doTest:Boolean):Boolean		{			//trace("TileFigure.rotate("+doTest+") called");			if (doTest)			{				for (var i:Number = 0; i < this.blocks.length; i++)				{					if (!this.blocks[i].rotate(this.blocks[0].x, this.blocks[0].y, true))					{						var s:block_land = new block_land();						s.play();						return false;					}				}			}			else			{				for (var j:Number = 0; j < this.blocks.length; j++)				{					this.blocks[j].rotate(this.blocks[0].x, this.blocks[0].y, false);				}			}			return true; 		}				// Same as rotate, but moves instead of rotates.		public function move(dir:String, doTest:Boolean):Boolean		{			//trace("TileFigure.move("+dir+", "+doTest+"); called");			if (doTest)			{				for (var i:Number = 0; i < this.blocks.length; i++)				{					if(!this.blocks[i].move(dir, true))					{						var s:block_land = new block_land();						//s.attachSound("block_land.mp3");						s.play();						return false;					}				}			}			else			{				for (var j:Number = 0; j < this.blocks.length; j++)				{					this.blocks[j].move(dir,false);				}			}			return true;		}				// Gets block from this.blocks based on X/Y coordinates.		public function getBlock(xp:Number, yp:Number)//:TileBlock		{			//trace("TileFigure.getBlock("+xp+", "+yp+"); called");			//if(xp<=10){//				xp = 11;//			}			//			try{				for (var i:Number = 0; i < this.blocks.length; i++)				{					if (this.blocks[i].x == xp && this.blocks[i].y == yp)					{						return this.blocks[i];					}				}			}catch(e:Error){				//trace("Error in TileFigure.getBlock");			}			return null;//undefined;//		}				// Gets block from this.blocks based on array index.		public function getBlockByIndex(index:Number):TileBlock		{			//trace("TileFigure.getBlockByIndex("+index+"); called");			//if (index >= 0 && index < this.blocks.length)			try{				if (index >= 0 && index < this.blocks.length)				{					return this.blocks[index];				}			}catch(e:Error){				//trace("Error in TileFigure.getBlockByIndex");			}			return null;//undefined;		}				public function get currentShape():String		{			//trace("TileFigure get currentShape() called");			 return this._curShape; 		}	}}